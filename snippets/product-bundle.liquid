{% comment %}
  Renders product bundle

  Accepts:
  - product: {Object} product object.
  - block: {Object} passing the block information.
  - product_form_id: {String} Id of the product form to which the variant picker is associated.
  - update_url: {Boolean} whether or not to update url when changing variants. If false, the url isn't updated. Default: true (optional).
  Usage:
  {% render 'product-bundle', product: product, block: block, product_form_id: product_form_id %}
{% endcomment %}

{% assign second_product = product.metafields.product_bundle.product.value %}
{% assign combined_price = product.price %}

{% assign firstProductCountExceeded = false %}
{% assign secondProductCountExceeded = false %}

{% for item in cart.items %}
    {% if item.variant_id == product.variants[0].id %}
        {% if item.quantity >= product.variants[0].inventory_quantity %}
            {% assign firstProductCountExceeded = true %}
        {% endif %}
    {% endif %}
    {% if item.variant_id == second_product.variants[0].id %}
        {% if item.quantity >= second_product.variants[0].inventory_quantity %}
            {% assign secondProductCountExceeded = true %}
        {% endif %}
    {% endif %}
{% endfor %}

{% if second_product != blank and second_product.available == true %}
    <div class="product-bundle" id="product-bundle">
        
        {%- if block.settings.title != blank -%}
            <div class="product-bundle__title">
                <h3>{{ block.settings.title }}</h3>
            </div>
        {%- endif -%}

        <div class="product-bundle__container">
            <div class="product-bundle__grid">
                <div class="product-bundle-item product-bundle-item--1">
                    {% render 'card-product', card_product: product %}
                </div>
                <div class="product-bundle-plus">
                    <span>+</span>
                </div>
                <div class="product-bundle-item product-bundle-item--2">
                    {% render 'card-product', card_product: second_product %}
                </div>
            </div>

            <span class="product-bundle__separator"></span>

            <button id="BundleSubmitButton" type="submit" name="add" class="product-bundle__btn product-form__submit button button--full-width button--secondary" aria-haspopup="dialog" {% if firstProductCountExceeded or secondProductCountExceeded %}disabled{% endif %}>
                <span>Add both to Cart - {{ product.price | plus: second_product.price | money }}</span>
                <div class="loading-overlay__spinner hidden">
                  <svg aria-hidden="true" focusable="false" class="spinner" viewBox="0 0 66 66" xmlns="http://www.w3.org/2000/svg">
                    <circle class="path" fill="none" stroke-width="6" cx="33" cy="33" r="30"></circle>
                  </svg>
                </div>
            </button>

            {% if firstProductCountExceeded %}
                <span class='product-bundle__error'>You can't add more {{ product.title }} to the cart.</span>
            {% endif %}
            {% if secondProductCountExceeded %}
                <span class='product-bundle__error'>You can't add more {{ second_product.title }} to the cart.</span>
            {% endif %}

        </div>
    </div>
{% endif %}

<script>

    let formData = {
        'items': [{
            'id': {{ product.variants[0].id }},
            'quantity': 1
            },
            {
            'id': {{ second_product.variants[0].id }},
            'quantity': 1
        }],
        'sections': 'cart-drawer,cart-icon-bubble'
    };

    document.querySelector('#BundleSubmitButton').addEventListener("click", async () => {
        const response = await fetch(window.Shopify.routes.root + 'cart/add.js', {
            method: 'POST',
            headers: {
            'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
        })
        .then(response => {
            return response.json();
        });

        if (response.status === 422) {
            alert(response.description);
            return;
        } else {
            const cartDrawerHtml = document.createElement("div");
            cartDrawerHtml.innerHTML = response.sections['cart-drawer'];
            const newBox = cartDrawerHtml.querySelector(".cart-drawer").innerHTML;
            document.querySelector(".cart-drawer").innerHTML = newBox;
            document.querySelector('cart-drawer').classList.remove('is-empty');
            document.querySelector('cart-drawer').classList.add('animate','active');


            const iconBubbleHtml = document.createElement("div");
            iconBubbleHtml.innerHTML = response.sections['cart-icon-bubble'];

            const cartIcon = document.querySelector('.header__icon.header__icon--cart');
            cartIcon.appendChild(iconBubbleHtml);
        }
    }
    )
</script>

